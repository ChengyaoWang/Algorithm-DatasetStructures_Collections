# include <vector>
# include <numeric>
# include <unordered_map>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> uf(n);
        iota(uf.begin(), uf.end(), 0);

        auto uf_dfs = [&](int i) {
            while(i != uf[i])
                i = uf[i];
            return i;
        };

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j || graph[i][j] == 0)     continue;
                int a = uf_dfs(i), b = uf_dfs(j);
                uf[a] = min(a, b);
                uf[b] = min(a, b);
            }
        }

        unordered_map<int, int> groupCnt(n), initCnt(n);
        for (int i = 0; i < n; ++i) {
            ++groupCnt[uf_dfs(i)];
        }
        for (auto& elem: initial) {
            ++initCnt[uf_dfs(elem)];
        }

        int delta = -1, ret = -1;
        for (auto& elem: initial) {
            auto a = uf_dfs(elem);
            auto cond1 = (initCnt[a] == 1) && (groupCnt[a] > delta || (groupCnt[a] == delta && elem < ret));
            auto cond2 = (initCnt[a] > 1) && (groupCnt[a] >= delta) && (elem < ret);
            if (cond1 || cond2) {
                ret = elem;
                delta = (initCnt[a] == 1) ? groupCnt[a]: 0;
            }
        }

        return ret;
    }
};